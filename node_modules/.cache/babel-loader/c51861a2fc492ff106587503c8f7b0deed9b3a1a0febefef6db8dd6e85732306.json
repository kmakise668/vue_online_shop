{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nconst api = axios.create({\n  baseURL: 'http://localhost:7676/api',\n  timeout: 10000\n});\n\n// Интерцептор для обновления Access Token\napi.interceptors.request.use(async config => {\n  // Проверяем время действия Access Token\n  const accessTokenExp = jwt_decode(localStorage.accessToken).exp;\n  const now = Math.floor(Date.now() / 1000);\n\n  // Если Access Token скоро истечет, обновляем его\n  if (accessTokenExp - now <= 60) {\n    const newAccessToken = await refreshAccessToken();\n    config.headers.Authorization = `Bearer ${newAccessToken}`;\n  }\n  return config;\n});\n\n// Функция для обновления Access Token\nasync function refreshAccessToken() {\n  try {\n    const response = await api.post('/users/refresh-token');\n    const newAccessToken = response.data.accessToken;\n    localStorage.accessToken = newAccessToken; // Сохраняем новый Access Token\n\n    return newAccessToken;\n  } catch (error) {\n    console.error('Error refreshing Access Token:', error);\n    throw error;\n  }\n}\nexport default api;","map":{"version":3,"names":["axios","jwt_decode","api","create","baseURL","timeout","interceptors","request","use","config","accessTokenExp","localStorage","accessToken","exp","now","Math","floor","Date","newAccessToken","refreshAccessToken","headers","Authorization","response","post","data","error","console"],"sources":["/Users/dev/Desktop/vue /src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst api = axios.create({\n    baseURL: 'http://localhost:7676/api',\n    timeout: 10000,\n});\n\n// Интерцептор для обновления Access Token\napi.interceptors.request.use(async(config) => {\n    // Проверяем время действия Access Token\n    const accessTokenExp = jwt_decode(localStorage.accessToken).exp;\n    const now = Math.floor(Date.now() / 1000);\n\n    // Если Access Token скоро истечет, обновляем его\n    if (accessTokenExp - now <= 60) {\n        const newAccessToken = await refreshAccessToken();\n        config.headers.Authorization = `Bearer ${newAccessToken}`;\n    }\n\n    return config;\n});\n\n// Функция для обновления Access Token\nasync function refreshAccessToken() {\n    try {\n        const response = await api.post('/users/refresh-token');\n        const newAccessToken = response.data.accessToken;\n\n        localStorage.accessToken = newAccessToken; // Сохраняем новый Access Token\n\n        return newAccessToken;\n    } catch (error) {\n        console.error('Error refreshing Access Token:', error);\n        throw error;\n    }\n}\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AAEnC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAMC,MAAM,IAAK;EAC1C;EACA,MAAMC,cAAc,GAAGT,UAAU,CAACU,YAAY,CAACC,WAAW,CAAC,CAACC,GAAG;EAC/D,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;;EAEzC;EACA,IAAIJ,cAAc,GAAGI,GAAG,IAAI,EAAE,EAAE;IAC5B,MAAMI,cAAc,GAAG,MAAMC,kBAAkB,CAAC,CAAC;IACjDV,MAAM,CAACW,OAAO,CAACC,aAAa,GAAI,UAASH,cAAe,EAAC;EAC7D;EAEA,OAAOT,MAAM;AACjB,CAAC,CAAC;;AAEF;AACA,eAAeU,kBAAkBA,CAAA,EAAG;EAChC,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMpB,GAAG,CAACqB,IAAI,CAAC,sBAAsB,CAAC;IACvD,MAAML,cAAc,GAAGI,QAAQ,CAACE,IAAI,CAACZ,WAAW;IAEhDD,YAAY,CAACC,WAAW,GAAGM,cAAc,CAAC,CAAC;;IAE3C,OAAOA,cAAc;EACzB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ;AAEA,eAAevB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}