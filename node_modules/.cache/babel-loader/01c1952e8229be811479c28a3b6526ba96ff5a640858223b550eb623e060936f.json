{"ast":null,"code":"export default {\n  name: 'v-breadcrumb',\n  props: {\n    productName: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    breadcrumbs() {\n      const route = this.$route;\n      const pathSegments = route.path.split('/').filter(segment => segment !== '');\n      const breadcrumbs = pathSegments.map((segment, index) => {\n        // Если текущий сегмент пути - это id продукта (число), не включаем его в хлебные крошки\n        if (index === pathSegments.length - 1 && !isNaN(Number(segment))) {\n          return {\n            text: '',\n            link: null\n          };\n        }\n        const link = `/${pathSegments.slice(0, index + 1).join('/')}`;\n        const routeName = pathSegments[index]; // Используем текущий сегмент пути для получения названия маршрута\n        const mappedRouteName = this.mapRouteName(routeName) || routeName;\n        return {\n          text: mappedRouteName,\n          link: index === pathSegments.length - 1 ? null : link\n        };\n      });\n\n      // Заменяем последние два элемента на название продукта\n      breadcrumbs.splice(-2, 2, {\n        text: this.productName,\n        link: null\n      });\n      return breadcrumbs;\n    }\n  },\n  methods: {\n    mapRouteName(routeName) {\n      // Замените английские названия на русские\n      const routeMappings = {\n        home: 'Главная страница',\n        catalog: 'Каталог'\n      };\n\n      // Возвращаем русское название маршрута, если оно есть в routeMappings\n      return routeMappings[routeName];\n    }\n  }\n};","map":{"version":3,"names":["name","props","productName","type","String","default","computed","breadcrumbs","route","$route","pathSegments","path","split","filter","segment","map","index","length","isNaN","Number","text","link","slice","join","routeName","mappedRouteName","mapRouteName","splice","methods","routeMappings","home","catalog"],"sources":["/Users/dev/Desktop/vue /src/components/v-breadcrumb.vue"],"sourcesContent":["<!-- <template>\n<nav aria-label=\"breadcrumb\">\n    <ol class=\"flex space-x-2\">\n        <li v-for=\"(breadcrumb, index) in breadcrumbs\" :key=\"index\">\n            <router-link v-if=\"breadcrumb.link\" :to=\"breadcrumb.link\" class=\"after:content-['/'] after:ml-2 text-gray-600 hover:text-purple-700\">\n                {{ breadcrumb.text }}\n            </router-link>\n            <span v-else class=\"text-purple-700\">{{ breadcrumb.text }}</span>\n        </li>\n    </ol>\n</nav>\n</template>\n\n<script>\nexport default {\n    name: 'v-breadcrumb',\n    computed: {\n        breadcrumbs() {\n            const route = this.$route;\n            const pathSegments = route.path.split(\"/\").filter((segment) => segment !== \"\");\n            const breadcrumbs = pathSegments.map((segment, index) => {\n                // Если текущий сегмент пути - это id продукта (число), не включаем его в хлебные крошки\n                if (!isNaN(Number(segment)) && index === pathSegments.length - 1) {\n                    return {\n                        text: \"\"\n                    };\n                }\n\n                const link = `/${pathSegments.slice(0, index + 1).join(\"/\")}`;\n                const routeName = pathSegments[index]; // Используем текущий сегмент пути для получения названия маршрута\n                const mappedRouteName = this.mapRouteName(routeName) || routeName;\n                return {\n                    text: mappedRouteName,\n                    link: index === pathSegments.length - 1 ? null : link,\n                };\n            });\n            return breadcrumbs;\n        },\n    },\n    methods: {\n        mapRouteName(routeName) {\n            // Замените английские названия на русские\n            const routeMappings = {\n                home: 'Главная страница',\n                catalog: 'Каталог',\n\n            };\n\n            return routeMappings[routeName];\n        },\n    },\n};\n</script>\n-->\n<template>\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"flex space-x-2\">\n        <li v-for=\"(breadcrumb, index) in breadcrumbs\" :key=\"index\">\n          <router-link v-if=\"breadcrumb.link\" :to=\"breadcrumb.link\" class=\"after:content-['/'] after:ml-2 text-gray-600 hover:text-purple-700\">\n            {{ breadcrumb.text }}\n          </router-link>\n          <span v-else class=\"text-purple-700\">{{ breadcrumb.text }}</span>\n        </li>\n      </ol>\n    </nav>\n  </template>\n  \n  <script>\n  export default {\n    name: 'v-breadcrumb',\n    props: {\n      productName: {\n        type: String,\n        default: '',\n      },\n    },\n    computed: {\n      breadcrumbs() {\n        const route = this.$route;\n        const pathSegments = route.path.split('/').filter((segment) => segment !== '');\n        const breadcrumbs = pathSegments.map((segment, index) => {\n          // Если текущий сегмент пути - это id продукта (число), не включаем его в хлебные крошки\n          if (index === pathSegments.length - 1 && !isNaN(Number(segment))) {\n            return { text: '', link: null };\n          }\n  \n          const link = `/${pathSegments.slice(0, index + 1).join('/')}`;\n          const routeName = pathSegments[index]; // Используем текущий сегмент пути для получения названия маршрута\n          const mappedRouteName = this.mapRouteName(routeName) || routeName;\n          return {\n            text: mappedRouteName,\n            link: index === pathSegments.length - 1 ? null : link,\n          };\n        });\n  \n        // Заменяем последние два элемента на название продукта\n        breadcrumbs.splice(-2, 2, { text: this.productName, link: null });\n  \n        return breadcrumbs;\n      },\n    },\n    methods: {\n      mapRouteName(routeName) {\n        // Замените английские названия на русские\n        const routeMappings = {\n          home: 'Главная страница',\n          catalog: 'Каталог',\n        };\n  \n        // Возвращаем русское название маршрута, если оно есть в routeMappings\n        return routeMappings[routeName];\n      },\n    },\n  };\n  </script>\n  "],"mappings":"AAoEE,eAAe;EACbA,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,MAAMC,KAAI,GAAI,IAAI,CAACC,MAAM;MACzB,MAAMC,YAAW,GAAIF,KAAK,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAEC,OAAO,IAAKA,OAAM,KAAM,EAAE,CAAC;MAC9E,MAAMP,WAAU,GAAIG,YAAY,CAACK,GAAG,CAAC,CAACD,OAAO,EAAEE,KAAK,KAAK;QACvD;QACA,IAAIA,KAAI,KAAMN,YAAY,CAACO,MAAK,GAAI,KAAK,CAACC,KAAK,CAACC,MAAM,CAACL,OAAO,CAAC,CAAC,EAAE;UAChE,OAAO;YAAEM,IAAI,EAAE,EAAE;YAAEC,IAAI,EAAE;UAAK,CAAC;QACjC;QAEA,MAAMA,IAAG,GAAK,IAAGX,YAAY,CAACY,KAAK,CAAC,CAAC,EAAEN,KAAI,GAAI,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAE,EAAC;QAC7D,MAAMC,SAAQ,GAAId,YAAY,CAACM,KAAK,CAAC,EAAE;QACvC,MAAMS,eAAc,GAAI,IAAI,CAACC,YAAY,CAACF,SAAS,KAAKA,SAAS;QACjE,OAAO;UACLJ,IAAI,EAAEK,eAAe;UACrBJ,IAAI,EAAEL,KAAI,KAAMN,YAAY,CAACO,MAAK,GAAI,IAAI,IAAG,GAAII;QACnD,CAAC;MACH,CAAC,CAAC;;MAEF;MACAd,WAAW,CAACoB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;QAAEP,IAAI,EAAE,IAAI,CAAClB,WAAW;QAAEmB,IAAI,EAAE;MAAK,CAAC,CAAC;MAEjE,OAAOd,WAAW;IACpB;EACF,CAAC;EACDqB,OAAO,EAAE;IACPF,YAAYA,CAACF,SAAS,EAAE;MACtB;MACA,MAAMK,aAAY,GAAI;QACpBC,IAAI,EAAE,kBAAkB;QACxBC,OAAO,EAAE;MACX,CAAC;;MAED;MACA,OAAOF,aAAa,CAACL,SAAS,CAAC;IACjC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}