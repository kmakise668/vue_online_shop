{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"oldPassword\"\n}, \"Старый пароль:\", -1);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"newPassword\"\n}, \"Новый пароль:\", -1);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Сменить пароль\", -1);\nconst _hoisted_4 = {\n  key: 0,\n  class: \"text-red-500 mt-6\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_notifications = _resolveComponent(\"v-notifications\");\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.changePassword && $options.changePassword(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"oldPassword\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.oldPassword = $event)\n  }, null, 512), [[_vModelText, $data.oldPassword]])]), _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"newPassword\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.newPassword = $event)\n  }, null, 512), [[_vModelText, $data.newPassword]])]), _hoisted_3, $data.formSubmitted ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, _toDisplayString($data.message), 1)) : _createCommentVNode(\"\", true), _createVNode(_component_v_notifications)], 32);\n}","map":{"version":3,"names":["_createElementVNode","for","type","class","_createElementBlock","onSubmit","_cache","_withModifiers","args","$options","changePassword","_hoisted_1","id","$data","oldPassword","$event","_hoisted_2","newPassword","_hoisted_3","formSubmitted","_hoisted_4","_toDisplayString","message","_createVNode","_component_v_notifications"],"sources":["/Users/dev/Desktop/vue /src/components/dashboard/v-update-password.vue"],"sourcesContent":["<template>\n    <form @submit.prevent=\"changePassword\">\n      <div>\n        <label for=\"oldPassword\">Старый пароль:</label>\n        <input type=\"password\" id=\"oldPassword\" v-model=\"oldPassword\" />\n  \n      </div>\n      <div>\n        <label for=\"newPassword\">Новый пароль:</label>\n        <input type=\"password\" id=\"newPassword\" v-model=\"newPassword\" />\n    \n      </div>\n\n    <button type=\"submit\" >Сменить пароль</button>\n\n\n    <p class=\"text-red-500 mt-6\" v-if=\"formSubmitted\">{{ message }}</p>\n    <v-notifications />\n    </form>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import { mapGetters } from 'vuex';\n  import vNotifications from \"@/components/notif/v-notifications.vue\";\n\n  export default {\n    components: {\n        vNotifications, \n    },\n    data() {\n      return {\n        oldPassword: '',\n        newPassword: '',\n        message:'',\n        formSubmitted: false, \n       \n      };\n    },\n    methods: {\n        async changePassword() {\n      // Устанавливаем флаг formSubmitted в true при отправке формы\n      this.formSubmitted = true;\n\n      // Проверка, что оба поля заполнены перед отправкой\n      if (!this.oldPassword || !this.newPassword) {\n       this.message = 'Заполните оба поля.'\n        return;\n      }\n\n      try {\n        // Отправьте запрос на сервер, чтобы проверить старый пароль\n        const userId = parseInt(localStorage.getItem('id'), 10);\n        const response = await axios.post('http://localhost:7676/api/users/check-password', {\n          oldPassword: this.oldPassword,\n          userId,\n        });\n\n        // Если старый пароль верен, отправьте запрос на обновление пароля\n        if (response.data.valid) {\n          await axios.put('http://localhost:7676/api/users/update-password', {\n            newPassword: this.newPassword,\n            userId,\n          });\n\n          this.$store.dispatch(\"addNotification\", {\n            type: \"success\", \n            text: \"Успех\",\n            description: \"Пароль успешно изменен.\",\n            });\n\n          // Очистите поля ввода\n          this.oldPassword = '';\n          this.newPassword = '';\n        } else {\n            this.$store.dispatch(\"addNotification\", {\n            type: \"error\", \n            text: \"Ошибка\",\n            description: \"Старый пароль неверный.\",\n            });\n        }\n      } catch (error) {\n        console.error(error);\n        this.$store.dispatch(\"addNotification\", {\n            type: \"error\", \n            text: \"Ошибка\",\n            description: \"Внутренняя ошибка приложения.\",\n            });\n      }\n    },\n    },\n    computed: {\n    ...mapGetters('notifications', ['getNotifications']),\n    notifications() {\n      return this.getNotifications;\n    },\n}\n  };\n  </script>\n  "],"mappings":";gCAGQA,mBAAA,CAA+C;EAAxCC,GAAG,EAAC;AAAa,GAAC,gBAAc;gCAKvCD,mBAAA,CAA8C;EAAvCC,GAAG,EAAC;AAAa,GAAC,eAAa;gCAK1CD,mBAAA,CAA8C;EAAtCE,IAAI,EAAC;AAAQ,GAAE,gBAAc;;;EAGlCC,KAAK,EAAC;;;;uBAfTC,mBAAA,CAiBO;IAjBAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;MACnCR,mBAAA,CAIM,cAHJW,UAA+C,E,gBAC/CX,mBAAA,CAAgE;IAAzDE,IAAI,EAAC,UAAU;IAACU,EAAE,EAAC,aAAa;+DAAUC,KAAA,CAAAC,WAAW,GAAAC,MAAA;gCAAXF,KAAA,CAAAC,WAAW,E,KAG9Dd,mBAAA,CAIM,cAHJgB,UAA8C,E,gBAC9ChB,mBAAA,CAAgE;IAAzDE,IAAI,EAAC,UAAU;IAACU,EAAE,EAAC,aAAa;+DAAUC,KAAA,CAAAI,WAAW,GAAAF,MAAA;gCAAXF,KAAA,CAAAI,WAAW,E,KAIhEC,UAA8C,EAGXL,KAAA,CAAAM,aAAa,I,cAAhDf,mBAAA,CAAmE,KAAnEgB,UAAmE,EAAAC,gBAAA,CAAdR,KAAA,CAAAS,OAAO,S,+BAC5DC,YAAA,CAAmBC,0BAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}