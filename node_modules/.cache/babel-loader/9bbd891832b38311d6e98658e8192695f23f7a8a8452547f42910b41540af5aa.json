{"ast":null,"code":"import { mapGetters, mapActions } from 'vuex';\nimport axios from 'axios';\nimport vUpdatePassword from './v-update-password.vue';\nimport vNotifications from \"@/components/notif/v-notifications.vue\";\nexport default {\n  components: {\n    vUpdatePassword,\n    vNotifications\n  },\n  data() {\n    return {\n      formValues: {},\n      // Здесь будут храниться текущие значения полей формы\n      originalUser: {}\n    };\n  },\n  computed: {\n    ...mapGetters(['user']) // Получите пользователя из хранилища Vuex\n  },\n\n  created() {\n    const userId = localStorage.getItem('id');\n    this.fetchUserData(userId);\n    this.originalUser = {\n      ...this.user\n    };\n  },\n  methods: {\n    ...mapActions(['fetchUserData']),\n    // Вызовите действие для получения данных пользователя\n    async updateUser() {\n      try {\n        const {\n          id,\n          name,\n          email,\n          role,\n          phone\n        } = this.user;\n        // Отправить запрос на сервер для обновления данных пользователя\n        await axios.put('http://localhost:7676/api/users/user-update', {\n          id,\n          name,\n          email,\n          role,\n          phone\n        });\n\n        // После успешного обновления данных, можно вызвать действие fetchUserData для получения обновленных данных пользователя\n        await this.fetchUserData(id);\n        this.$store.dispatch(\"addNotification\", {\n          type: \"success\",\n          text: \"Успех\",\n          description: \"Данные успешно обновлены.\"\n        });\n      } catch (error) {\n        console.error(error);\n        this.$store.dispatch(\"addNotification\", {\n          type: \"error\",\n          text: \"Ошибка\",\n          description: \"Внутренняя ошибка приложения.\"\n        });\n      }\n    },\n    cancelUpdate() {\n      // Проверяем, есть ли несохраненные изменения\n      const hasUnsavedChanges = this.hasUnsavedChanges();\n      if (hasUnsavedChanges) {\n        // Здесь можно показать предупреждающее сообщение\n        const confirmCancel = window.confirm(\"Вы уверены, что хотите отменить внесенные изменения?\");\n        if (confirmCancel) {\n          console.log(this.originalUser);\n          console.log(this.formValues);\n          this.formValues = {\n            ...this.originalUser\n          };\n\n          // Закрыть форму без сохранения и, если есть, загрузить предыдущие данные\n          // или перенаправить пользователя на другую страницу\n          // Например:\n          // Метод для загрузки предыдущих данных\n          // this.$router.push('/'); // Перенаправление на другую страницу\n        }\n      } else {\n        // Если изменений нет, просто закрыть форму\n        // или перенаправить пользователя на другую страницу\n        // Например:\n        // this.$router.push('/'); // Перенаправление на другую страницу\n      }\n    },\n    // Функция для проверки наличия несохраненных изменений\n    hasUnsavedChanges() {\n      for (const key in this.formValues) {\n        if (this.formValues[key] !== this.user[key]) {\n          // Если хотя бы одно поле отличается от исходного значения, есть несохраненные изменения\n          return true;\n        }\n      }\n      return false;\n    }\n  },\n  watch: {\n    // Следим за изменениями значений полей формы и сохраняем их в formValues\n    user: {\n      handler(newUser) {\n        this.formValues = {\n          ...newUser\n        };\n      },\n      immediate: true // Запустить обработчик сразу после создания компонента\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","axios","vUpdatePassword","vNotifications","components","data","formValues","originalUser","computed","created","userId","localStorage","getItem","fetchUserData","user","methods","updateUser","id","name","email","role","phone","put","$store","dispatch","type","text","description","error","console","cancelUpdate","hasUnsavedChanges","confirmCancel","window","confirm","log","key","watch","handler","newUser","immediate"],"sources":["/Users/dev/Desktop/vue /src/components/dashboard/v-admin-profile.vue"],"sourcesContent":["<template>\n    <form  @submit.prevent=\"updateUser\">\n    <div class=\"space-y-12\">\n\n      <div class=\"border-b border-gray-900/10 pb-12\">\n        <h2 class=\"text-base font-semibold leading-7 text-gray-900\">Персональные данные пользователя</h2>\n        <p class=\"mt-1 text-sm leading-6 text-gray-600\">Авторизационные данные / Почта для заявок</p>\n\n        <div class=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n          <div class=\"sm:col-span-3\">\n            <label for=\"first-name\" class=\"block text-sm font-medium leading-6 text-gray-900\">Имя пользователя</label>\n            <div class=\"mt-2\">\n              <input type=\"text\" name=\"first-name\" id=\"first-name\" v-model=\"formValues.name\" autocomplete=\"given-name\" class=\"block w-full  px-4 rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\" />\n            </div>\n          </div>\n\n          <div class=\"sm:col-span-3\">\n            <label for=\"email\" class=\"block text-sm font-medium leading-6 text-gray-900\">Email </label>\n            <div class=\"mt-2\">\n              <input id=\"email\" name=\"email\" type=\"email\" v-model=\"formValues.email\" autocomplete=\"email\" class=\"block w-full  px-4 rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\" />\n            </div>\n          </div>\n          <div class=\"sm:col-span-3\">\n            <label for=\"email\" class=\"block text-sm font-medium leading-6 text-gray-900\">Номер телефона</label>\n            <div class=\"mt-2\">\n              <input id=\"phone\" name=\"phone\" type=\"text\" v-model=\"formValues.phone\" autocomplete=\"\" class=\"block w-full px-4 rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\" />\n            </div>\n          </div>\n          <vUpdatePassword />\n        </div>\n        <div class=\"col-span-full mt-4\">\n            <label for=\"cover-photo\" class=\"block text-sm font-medium leading-6 text-gray-900\">Cover photo</label>\n            <div class=\"mt-2 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10\">\n              <div class=\"text-center\">\n                <!-- <PhotoIcon class=\"mx-auto h-12 w-12 text-gray-300\" aria-hidden=\"true\" /> -->\n                <div class=\"mt-4 flex text-sm leading-6 text-gray-600\">\n                  <label for=\"file-upload\" class=\"relative cursor-pointer rounded-md bg-white font-semibold text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-indigo-500\">\n                    <span>Upload a file</span>\n                    <input id=\"file-upload\" name=\"file-upload\" type=\"file\" class=\"sr-only\" />\n                  </label>\n                  <p class=\"pl-1\">or drag and drop</p>\n                </div>\n                <p class=\"text-xs leading-5 text-gray-600\">PNG, JPG, GIF up to 10MB</p>\n              </div>\n            </div>\n            </div>\n      </div>\n\n      <div class=\"border-b border-gray-900/10 pb-12\">\n        <h2 class=\"text-base font-semibold leading-7 text-gray-900\">Уведомления</h2>\n        <p class=\"mt-1 text-sm leading-6 text-gray-600\">Хотите получать уведомления на почту?</p>\n\n        <div class=\"mt-5 space-y-10\">\n          <fieldset>\n            <div class=\"mt-6 space-y-6\">\n              <div class=\"relative flex gap-x-3\">\n                <div class=\"flex h-6 items-center\">\n                  <input id=\"comments\" name=\"comments\" type=\"checkbox\" class=\"h-4 w-4  px-4 rounded border-gray-300 text-blue-600 focus:ring-blue-600\" />\n                </div>\n                <div class=\"text-sm leading-6\">\n                  <label for=\"comments\" class=\"font-medium text-gray-900\">Заявки на сайте</label>\n                  <p class=\"text-gray-500\">Отправлять заявки на почту </p>\n                </div>\n              </div>\n              <!-- <div class=\"relative flex gap-x-3\">\n                <div class=\"flex h-6 items-center\">\n                  <input id=\"candidates\" name=\"candidates\" type=\"checkbox\" class=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-600\" />\n                </div>\n                <div class=\"text-sm leading-6\">\n                  <label for=\"candidates\" class=\"font-medium text-gray-900\"></label>\n                  <p class=\"text-gray-500\">Get notified when a candidate applies for a job.</p>\n                </div>\n              </div> -->\n            </div>\n          </fieldset>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"mt-6 flex items-center justify-end gap-x-6\">\n      <button type=\"button\"  :disabled=\"!hasUnsavedChanges()\"  @click=\"cancelUpdate\" class=\"text-sm font-semibold leading-6 text-gray-900 \"       :class=\"{ 'cursor-not-allowed': !hasUnsavedChanges(), 'text-gray-600 hover:text-blue-600': hasUnsavedChanges() }\">Отмена</button>\n      <button type=\"submit\" :disabled=\"!hasUnsavedChanges()\"  class=\"rounded-md px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\"\n      :class=\"{ 'bg-gray-500 cursor-not-allowed hover:bg-gray-600': !hasUnsavedChanges(), 'bg-blue-600 hover:bg-blue-500': hasUnsavedChanges() }\">Сохранить изменения</button>\n    </div>\n    <v-notifications />\n  </form>\n</template>\n\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport axios from 'axios';\nimport vUpdatePassword from './v-update-password.vue';\nimport vNotifications from \"@/components/notif/v-notifications.vue\";\n\n    export default {\n        components: {\n            vUpdatePassword, \n            vNotifications\n        },\n        data() {\n    return {\n      formValues: {}, // Здесь будут храниться текущие значения полей формы\n      originalUser: {},\n    };\n  },\n        computed: {\n    ...mapGetters(['user']), // Получите пользователя из хранилища Vuex\n  },\n  created() {\n    const userId = localStorage.getItem('id');\n    this.fetchUserData(userId);\n    this.originalUser = { ...this.user }; \n  },\n  methods: {\n    ...mapActions(['fetchUserData']), // Вызовите действие для получения данных пользователя\n    async updateUser() {\n      try {\n        const { id, name, email, role, phone } = this.user;\n        // Отправить запрос на сервер для обновления данных пользователя\n        await axios.put('http://localhost:7676/api/users/user-update', {\n          id,\n          name,\n          email,\n          role,\n          phone,\n        });\n    \n        // После успешного обновления данных, можно вызвать действие fetchUserData для получения обновленных данных пользователя\n        await this.fetchUserData(id);\n\n        this.$store.dispatch(\"addNotification\", {\n            type: \"success\", \n            text: \"Успех\",\n            description: \"Данные успешно обновлены.\",\n            });\n      } catch (error) {\n        console.error(error);\n        this.$store.dispatch(\"addNotification\", {\n            type: \"error\", \n            text: \"Ошибка\",\n            description: \"Внутренняя ошибка приложения.\",\n            });\n      }\n    },\n\n\n    cancelUpdate() {\n      // Проверяем, есть ли несохраненные изменения\n      const hasUnsavedChanges = this.hasUnsavedChanges();\n\n      if (hasUnsavedChanges) {\n        // Здесь можно показать предупреждающее сообщение\n        const confirmCancel = window.confirm(\"Вы уверены, что хотите отменить внесенные изменения?\");\n        if (confirmCancel) {\n            console.log(this.originalUser);\n            console.log(this.formValues );\n            this.formValues = { ...this.originalUser };\n            \n          // Закрыть форму без сохранения и, если есть, загрузить предыдущие данные\n          // или перенаправить пользователя на другую страницу\n          // Например:\n        // Метод для загрузки предыдущих данных\n          // this.$router.push('/'); // Перенаправление на другую страницу\n            \n        }\n      } else {\n        // Если изменений нет, просто закрыть форму\n        // или перенаправить пользователя на другую страницу\n        // Например:\n        // this.$router.push('/'); // Перенаправление на другую страницу\n      }\n    },\n\n    // Функция для проверки наличия несохраненных изменений\n    hasUnsavedChanges() {\n      for (const key in this.formValues) {\n        if (this.formValues[key] !== this.user[key]) {\n          // Если хотя бы одно поле отличается от исходного значения, есть несохраненные изменения\n          return true;\n        }\n      }\n      return false;\n    },\n\n    \n  },\n\n    watch: {\n    // Следим за изменениями значений полей формы и сохраняем их в formValues\n    user: {\n        handler(newUser) {\n        this.formValues = { ...newUser };\n        },\n        immediate: true, // Запустить обработчик сразу после создания компонента\n    },\n    },\n\n\n\n\n\n  \n      \n    }\n    \n </script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}